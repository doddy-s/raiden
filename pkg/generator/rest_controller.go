package generator

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/supabase/objects"
	"github.com/sev-2/raiden/pkg/utils"
)

var RestControllerLogger hclog.Logger = logger.HcLog().Named("generator.rest_controller")

// ----- Define type, variable and constant -----
type GenerateRestControllerData struct {
	Imports []string
	Model   string
	Package string
}

const (
	RestControllerDir      = "internal/controllers/rest/v1"
	RestControllerTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{- if gt (len .Imports) 0 }}

import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{- end }}

type RestController struct {
	raiden.ControllerBase
	Model models.{{ .Model }}
}
`
)

// ----- Generate rest controller -----
func GenerateRestControllers(basePath string, projectName string, tables []*GenerateModelInput, generateFn GenerateFn) (err error) {
	controllerPath := filepath.Join(basePath, RestControllerDir)
	RestControllerLogger.Trace("create controller folder if not exist", "path", controllerPath)
	if exist := utils.IsFolderExists(controllerPath); !exist {
		err = os.MkdirAll(controllerPath, os.ModePerm)
		if err != nil {
			return err
		}
	}

	for i := range tables {
		t := tables[i]
		if err := GenerateRestController(controllerPath, projectName, &t.Table, generateFn); err != nil {
			return err
		}
	}

	return nil
}

func GenerateRestController(controllerPath string, projectName string, table *objects.Table, generateFn GenerateFn) error {
	modelName := utils.SnakeCaseToPascalCase(table.Name)
	packageName := utils.SnakeCaseToPascalCase(table.Name)
	controllerDirName := utils.ToSnakeCase(table.Name)

	cPath := fmt.Sprintf("%s/%s", controllerPath, controllerDirName)
	if exist := utils.IsFolderExists(cPath); !exist {
		if err := utils.CreateFolder(cPath); err != nil {
			return err
		}
	}

	filePath := filepath.Join(controllerPath, fmt.Sprintf("%s/rest.go", utils.ToSnakeCase(table.Name)))

	// set imports path
	modelImportPath := fmt.Sprintf("%s/internal/models", utils.ToGoModuleName(projectName))
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden"),
		fmt.Sprintf("%q", modelImportPath),
	}

	data := GenerateRestControllerData{
		Package: packageName,
		Imports: imports,
		Model:   modelName,
	}

	// setup generate input param
	generateInput := GenerateInput{
		BindData:     data,
		Template:     RestControllerTemplate,
		TemplateName: "restControllerTemplate",
		OutputPath:   filePath,
	}

	// setup writer
	writer := FileWriter{FilePath: filePath}

	ModelLogger.Debug("generate model", "path", generateInput.OutputPath)
	return generateFn(generateInput, &writer)
}
