package generator

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

var TypeRegisterLogger hclog.Logger = logger.HcLog().Named("generator.type_register")

// ----- Define type, variable and constant -----
type (
	GenerateRegisterTypeData struct {
		Imports []string
		Package string
		Types   []string
	}
)

const (
	TypeRegisterFilename = "types.go"
	TypeRegisterDir      = "internal/bootstrap"
	TypeRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterTypes() {
	resource.RegisterTypes(
		{{- range .Types}}
		&types.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateTypeRegister(basePath string, projectName string, generateFn GenerateFn) error {
	typeRegisterDir := filepath.Join(basePath, TypeRegisterDir)
	TypeRegisterLogger.Trace("create bootstrap folder if not exist", typeRegisterDir)
	if exist := utils.IsFolderExists(typeRegisterDir); !exist {
		if err := utils.CreateFolder(typeRegisterDir); err != nil {
			return err
		}
	}

	typeDir := filepath.Join(basePath, TypeDir)
	TypeRegisterLogger.Trace("create types folder if not exist", typeDir)
	if exist := utils.IsFolderExists(typeDir); !exist {
		if err := utils.CreateFolder(typeDir); err != nil {
			return err
		}
	}

	// scan all type
	typeList, err := WalkScanType(typeDir)
	if err != nil {
		return err
	}

	input, err := createTypeRegisterInput(projectName, typeRegisterDir, typeList)
	if err != nil {
		return err
	}

	// setup writer
	writer := &FileWriter{FilePath: input.OutputPath}

	TypeRegisterLogger.Debug("generate type register", "path", input.OutputPath)
	return generateFn(input, writer)
}

func createTypeRegisterInput(projectName string, typeRegisterDir string, typeList []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(typeRegisterDir, TypeRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden/pkg/resource"),
	}

	if len(typeList) > 0 {
		typesImportPath := fmt.Sprintf("%s/internal/types", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", typesImportPath))
	}

	// set passed parameter
	data := GenerateRegisterTypeData{
		Package: "bootstrap",
		Imports: imports,
		Types:   typeList,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     TypeRegisterTemplate,
		TemplateName: "typeRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanType(typeDir string) ([]string, error) {
	ModelRegisterLogger.Trace("scan registered all types", "path", typeDir)

	types := make([]string, 0)
	err := filepath.Walk(typeDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			ModelRegisterLogger.Trace("collect types", "file-path", path)
			rs, e := getStructByBaseName(path, "TypeBase")
			if e != nil {
				return e
			}

			types = append(types, rs...)

		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return types, nil
}
