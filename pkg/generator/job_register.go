package generator

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

var JobRegisterLogger hclog.Logger = logger.HcLog().Named("generator.job_register")

// ----- Define type, variable and constant -----
type (
	GenerateRegisterJobData struct {
		Imports []string
		Package string
		Jobs    []string
	}
)

const (
	JobRegisterFilename = "jobs.go"
	JobRegisterDir      = "internal/bootstrap"
	JobDir              = "internal/jobs"
	JobRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterJobs(server *raiden.Server) {
	server.RegisterJobs(
		{{- range .Jobs}}
		&jobs.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateJobRegister(basePath string, projectName string, generateFn GenerateFn) error {
	jobRegisterDir := filepath.Join(basePath, JobRegisterDir)
	JobRegisterLogger.Trace("create bootstrap folder if not exist", "path", jobRegisterDir)
	if exist := utils.IsFolderExists(jobRegisterDir); !exist {
		if err := utils.CreateFolder(jobRegisterDir); err != nil {
			return err
		}
	}

	jobDir := filepath.Join(basePath, JobDir)
	JobRegisterLogger.Trace("create job folder if not exist", "path", jobDir)
	if exist := utils.IsFolderExists(jobDir); !exist {
		if err := utils.CreateFolder(jobDir); err != nil {
			return err
		}
	}

	// scan all controller
	jobList, err := WalkScanJob(jobDir)
	if err != nil {
		return err
	}

	input, err := createRegisterJobInput(projectName, jobRegisterDir, jobList)
	if err != nil {
		return err
	}

	JobRegisterLogger.Debug("generate job", "path", input.OutputPath)
	return generateFn(input, nil)
}

func createRegisterJobInput(projectName string, jobRegisterDir string, jobList []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(jobRegisterDir, JobRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden"),
	}

	if len(jobList) > 0 {
		jobImportPath := fmt.Sprintf("%s/internal/jobs", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", jobImportPath))
	}

	// set passed parameter
	data := GenerateRegisterJobData{
		Package: "bootstrap",
		Imports: imports,
		Jobs:    jobList,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     JobRegisterTemplate,
		TemplateName: "jobRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanJob(jobDir string) ([]string, error) {
	RpcRegisterLogger.Trace("scan all job", "path", jobDir)

	job := make([]string, 0)
	err := filepath.Walk(jobDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			RpcRegisterLogger.Trace("collect job", "path", path)
			rs, e := getStructByBaseName(path, "JobBase")
			if e != nil {
				return e
			}
			job = append(job, rs...)
		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return job, nil
}
