package generator

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

var SubscriberRegisterLogger hclog.Logger = logger.HcLog().Named("generator.subscriber_register")

// ----- Define type, variable and constant -----
type (
	GenerateRegisterSubscriberData struct {
		Imports     []string
		Package     string
		Subscribers []string
	}
)

const (
	SubscriberRegisterFilename = "subscribers.go"
	SubscriberRegisterDir      = "internal/bootstrap"
	SubscriberDir              = "internal/subscribers"
	SubscriberRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterSubscribers(server *raiden.Server) {
	server.RegisterSubscribers(
		{{- range .Subscribers}}
		&subscribers.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateSubscriberRegister(basePath string, projectName string, generateFn GenerateFn) error {
	subscriberRegisterDir := filepath.Join(basePath, SubscriberRegisterDir)
	SubscriberRegisterLogger.Trace("create bootstrap folder if not exist", "path", subscriberRegisterDir)
	if exist := utils.IsFolderExists(subscriberRegisterDir); !exist {
		if err := utils.CreateFolder(subscriberRegisterDir); err != nil {
			return err
		}
	}

	subscriberDir := filepath.Join(basePath, SubscriberDir)
	SubscriberRegisterLogger.Trace("create subscriber folder if not exist", "path", subscriberDir)
	if exist := utils.IsFolderExists(subscriberDir); !exist {
		if err := utils.CreateFolder(subscriberDir); err != nil {
			return err
		}
	}

	// scan all controller
	subscriberList, err := WalkScanSubscriber(subscriberDir)
	if err != nil {
		return err
	}

	input, err := createRegisterSubscriberInput(projectName, subscriberRegisterDir, subscriberList)
	if err != nil {
		return err
	}

	SubscriberRegisterLogger.Debug("generate subscriber", "path", input.OutputPath)
	return generateFn(input, nil)
}

func createRegisterSubscriberInput(projectName string, subscriberRegisterDir string, subscriberList []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(subscriberRegisterDir, SubscriberRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden"),
	}

	if len(subscriberList) > 0 {
		rpcImportPath := fmt.Sprintf("%s/internal/subscribers", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", rpcImportPath))
	}

	// set passed parameter
	data := GenerateRegisterSubscriberData{
		Package:     "bootstrap",
		Imports:     imports,
		Subscribers: subscriberList,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     SubscriberRegisterTemplate,
		TemplateName: "subscriberRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanSubscriber(subscriberDir string) ([]string, error) {
	RpcRegisterLogger.Trace("scan all subscriber", "path", subscriberDir)

	subscriber := make([]string, 0)
	err := filepath.Walk(subscriberDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			RpcRegisterLogger.Trace("collect subscriber", "path", path)
			rs, e := getStructByBaseName(path, "SubscriberBase")
			if e != nil {
				return e
			}
			subscriber = append(subscriber, rs...)
		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return subscriber, nil
}
